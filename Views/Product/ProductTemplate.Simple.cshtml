@model ProductDetailsModel
@using Nop.Core
@using Nop.Core.Domain.Seo;
@using Nop.Core.Infrastructure;
@using Nop.Services.Localization;
@using Nop.Web.Models.Catalog;
@using Nop.Web.Extensions;
@using Nop.Web.Controllers;

@functions
{
    public List<ProductOverviewModel> GetProducts(dynamic itemset)
    {
        if (itemset == null)
            return new List<ProductOverviewModel>();

        object[] ids = (object[])itemset;
        var productService = EngineContext.Current.Resolve<Nop.Services.Catalog.IProductService>();

        var products = productService.GetProductsByIds(ids.Cast<string>().Select(id => int.Parse(id)).ToArray());
        
        var controller = EngineContext.Current.Resolve<ProductController>();
        return controller.PrepareProductOverviewModels(
            EngineContext.Current.Resolve<IWorkContext>(),
            EngineContext.Current.Resolve<IStoreContext>(),
            EngineContext.Current.Resolve<Nop.Services.Catalog.ICategoryService>(),
            productService,
            EngineContext.Current.Resolve<Nop.Services.Catalog.ISpecificationAttributeService>(),
            EngineContext.Current.Resolve<Nop.Services.Catalog.IPriceCalculationService>(),
            EngineContext.Current.Resolve<Nop.Services.Catalog.IPriceFormatter>(),
            EngineContext.Current.Resolve<Nop.Services.Security.IPermissionService>(),
            EngineContext.Current.Resolve<ILocalizationService>(),
            EngineContext.Current.Resolve<Nop.Services.Tax.ITaxService>(),
            EngineContext.Current.Resolve<Nop.Services.Directory.ICurrencyService>(),
            EngineContext.Current.Resolve<Nop.Services.Media.IPictureService>(),
            EngineContext.Current.Resolve<IWebHelper>(),
            EngineContext.Current.Resolve<Nop.Core.Caching.ICacheManager>(),
            EngineContext.Current.Resolve<Nop.Core.Domain.Catalog.CatalogSettings>(),
            EngineContext.Current.Resolve<Nop.Core.Domain.Media.MediaSettings>(),
            products, true, true, null, false, false).ToList<ProductOverviewModel>();
    }
    
    public dynamic GetJsonObject(string uri, string userName, string password)
    {
        var request = WebRequest.Create(uri);
        request.ContentType = "application/json";
        request.Method = "GET";
        request.Credentials = new NetworkCredential(userName, password);

        try
        { 
            var response = request.GetResponse();

            if (response.ContentLength > 0)
            {
                StreamReader reader = new StreamReader(response.GetResponseStream());
                var data = reader.ReadToEnd();
                return Json.Decode(data);
            }
        }
        catch
        {
            // just return null when errors occur
        }

        return null;
    }
}

@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title, meta
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);

    var seoSettings = EngineContext.Current.Resolve<SeoSettings>();

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, this.Request.Url.Scheme);
        Html.AddCanonicalUrlParts(productUrl);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        var storeName = EngineContext.Current.Resolve<IStoreContext>().CurrentStore.GetLocalized(x => x.Name);
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Model.MetaDescription) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + Request.Url.AbsoluteUri + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(storeName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        var storeName = EngineContext.Current.Resolve<IStoreContext>().CurrentStore.GetLocalized(x => x.Name);
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(storeName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Model.MetaDescription) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + Request.Url.AbsoluteUri + "\" />");
    }

    // for code clarity
    var Product = Model;
}
        <!--product breadcrumb-->
        @Html.Partial("_ProductBreadcrumb", Model.Breadcrumb)
        @Html.Widget("productdetails_after_breadcrumb", Model.Id)
        <div class="page product-details-page">
            <div class="page-body">
                @Html.Widget("productdetails_top", Model.Id)
                @using (Html.BeginRouteForm("Product", new { SeName = Model.SeName }, FormMethod.Post, new { id = "product-details-form" }))
                {
                    <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
                        <div class="product-essential">
                            @Html.Widget("productdetails_before_pictures", Model.Id)
                            <!--product pictures-->
                            @Html.Partial("_ProductDetailsPictures", Model)
                            @Html.Widget("productdetails_after_pictures", Model.Id)
                            <div class="overview">
                                <div class="product-name">
                                    <h1 itemprop="name">
                                        @Model.Name
                                    </h1>
                                </div>
                                @if (!String.IsNullOrEmpty(Model.ShortDescription))
                                {
                                    <div class="short-description">
                                        @Html.Raw(Model.ShortDescription)
                                    </div>
                                }
                                @Html.Widget("productdetails_overview_top", Model.Id)
                                <!--product SKU, manufacturer part number, stock info-->
                                @Html.Partial("_SKU_Man_Stock", Model)
                                <!--Back in stock subscription-->
                                @Html.Partial("_BackInStockSubscription", Model)
                                <!--product manufacturers-->
                                @Html.Partial("_ProductManufacturers", Model.ProductManufacturers)
                                <!--product reviews-->
                                @Html.Partial("_ProductReviewOverview", Model.ProductReviewOverview)
                                <!--sample download-->
                                @Html.Partial("_DownloadSample", Model)
                                <!--attributes-->
                                @{
                                var dataDictAttributes = new ViewDataDictionary();
                                dataDictAttributes.TemplateInfo.HtmlFieldPrefix = string.Format("attributes_{0}", Model.Id);
                                @Html.Partial("_ProductAttributes", Model.ProductVariantAttributes, dataDictAttributes)
                                }
                                <!--gift card-->
                                @{
                                var dataDictGiftCard = new ViewDataDictionary();
                                dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = string.Format("giftcard_{0}", Model.Id);
                                @Html.Partial("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                                }
                                <!--price & add to cart-->
                                @{
                                var dataDictPrice = new ViewDataDictionary();
                                dataDictPrice.TemplateInfo.HtmlFieldPrefix = string.Format("price_{0}", Model.Id);
                                @Html.Partial("_ProductPrice", Model.ProductPrice, dataDictPrice)

                                var dataDictAddToCart = new ViewDataDictionary();
                                dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", Model.Id);
                                @Html.Partial("_AddToCart", Model.AddToCart, dataDictAddToCart)
                                }
                                @Html.Partial("_ProductEmailAFriendButton", Model)
                                @Html.Partial("_CompareProductsButton", Model)
                                @Html.Partial("_ShareButton", Model)
                                @Html.Widget("productdetails_overview_bottom", Model.Id)
                            </div>
                            @if (!String.IsNullOrEmpty(Model.FullDescription))
                            {
                                <div class="full-description" itemprop="description">
                                    @Html.Raw(Model.FullDescription)
                                </div>
                            }
                        </div>
                        @Html.Widget("productdetails_before_collateral", Model.Id)
                        <div class="product-collateral">
                            @Html.Partial("_ProductTierPrices", Model.TierPrices)
                            @Html.Partial("_ProductSpecifications", Model.ProductSpecifications)
                            @Html.Partial("_ProductTags", Model.ProductTags)



                            
<img src="/Content/Images/FBT_Placeholder.jpg" alt="Frequently Bought Together" style="margin-top: 20px" />


                            

                            @Html.Action("ProductsAlsoPurchased", "Product", new { productId = Model.Id })
                            @Html.Action("RelatedProducts", "Product", new { productId = Model.Id })
                    </div>
                </div>
            }
            @Html.Widget("productdetails_bottom", Model.Id)
        </div>
    </div>
